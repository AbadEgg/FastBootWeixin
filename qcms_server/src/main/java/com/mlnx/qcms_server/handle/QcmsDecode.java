package com.mlnx.qcms_server.handle;


import com.mlnx.qcms.protocol.DataPacket;
import com.mlnx.qcms.protocol.head.Header;
import com.mlnx.qcms.utils.InvalidPacketException;
import com.mlnx.qcms.utils.LogLevelInfo;
import com.mlnx.qcms.utils.QcmsLogUtils;

import java.util.List;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.ByteBufUtil;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.codec.ByteToMessageDecoder;
import io.netty.util.ReferenceCountUtil;

public class QcmsDecode extends ByteToMessageDecoder {

    enum State {
        HEAD, HEAD_INFO, CONTANT
    }

    private State state = State.HEAD;
    private int matchHeadIndex;
    private int length;

    @Override
    protected void decode(ChannelHandlerContext ctx, ByteBuf in,
                          List<Object> out) throws Exception {

//        if (MpLogLevelInfo.getInstance().isOpenFrameLog())
//            QcmsLogUtils.mpFrame("recive  frame:" + ByteBufUtil.hexDump(in));

        DataPacket dataPacket = new DataPacket();
        switch (state) {
            // 匹配包头
            case HEAD:
                if (matchHead(in)) {
                    state = State.HEAD_INFO;
                } else {
                    break;
                }
                // 读取包头内容
            case HEAD_INFO:
                // 读取内容
                if (in.isReadable(12)) {
                    dataPacket.getHeader().decode(in.readBytes(12).nioBuffer());
                    state = State.CONTANT;
                    length = dataPacket.getHeader().getPackageBytes();
                } else {
                    break;
                }
            case CONTANT:
                if (in.isReadable(length - 16)) {
                    ByteBuf frame = in.readBytes(length - 16);
                    try {
                        if (LogLevelInfo.getInstance().isOpenFrameLog()) {
                            QcmsLogUtils.mpFrame("receive  contant:" + ByteBufUtil.hexDump(frame));
                        }
                        dataPacket.getBody().decode(frame.nioBuffer());
//                        if (dataPacket.getBody().getCommand() != null && dataPacket.getBody().getCommand().getCmdType
//                                () == CmdType.CMD_BEGIN_COMMUNICATION) {
//                            DataPacket resp = new DataPacket();
//                            Command command = new Command();
//                            command.setCmdType(CmdType.CMD_BEGIN_COMMUNICATION_OK);
//                            resp.getBody().setCommand(command);
//                            resp.getHeader().setPackageNum(resp.getBody().calPackageNum());
//                            resp.getHeader().setPackageBytes(resp.getBody().calPackageBytes());
//                            resp.getHeader().setDeviceType(DeviceType.CENTER_MONITOR_SERVER);
//
//                            ctx.channel().writeAndFlush(resp);
//                        } else if (dataPacket.getBody().getEcgData() != null || dataPacket.getBody().getSpo2Data() !=
//                                null || dataPacket.getBody().getNibpData() != null) {
//                            DataPacket resp = new DataPacket();
//                            Command command = new Command();
//                            command.setCmdType(CmdType.CMD_CONNECT_HEART);
//                            resp.getBody().setCommand(command);
//                            resp.getHeader().setPackageNum(resp.getBody().calPackageNum());
//                            resp.getHeader().setPackageBytes(resp.getBody().calPackageBytes());
//                            resp.getHeader().setDeviceType(DeviceType.CENTER_MONITOR_SERVER);
//                            ctx.channel().writeAndFlush(resp);
//                        }
                        out.add(dataPacket);
                    } catch (InvalidPacketException e) {
                        e.printStackTrace();
                    } finally {
                        ReferenceCountUtil.release(frame);
                    }

                    state = State.HEAD;
                }
                break;
            default:
                break;
        }
    }


    private boolean matchHead(ByteBuf buf) {

        while (buf.isReadable()) {
            if (matchHeadIndex == Header.Heads.length) {
                matchHeadIndex = 0;
                return true;
            }
            byte b = buf.readByte();
            if (b == Header.Heads[matchHeadIndex]) {
                matchHeadIndex++;
            } else if (b == Header.Heads[0]) {
                matchHeadIndex = 1;
            } else {
                matchHeadIndex = 0;
            }
        }
        return false;
    }

    public static void main(String[] args) throws Exception {
        byte[] bytes = {0x51, 0x43, 0x4D, 0x53,
                (byte) 0xB8, 0x00, 0x00, 0x04,
                (byte) 0xB1, 0x03,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                , (byte) 0x80, (byte) 0x81, (byte) 0xAF, 0x00, 0x00, 0x31, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00
                , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x00, 0x38, 0x00, 0x00
                , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                , 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,

                (byte) 0x81, (byte) 0x99, (byte) 0x93, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00
                , 0x00, 0x00, (byte) (byte) 0xFF, 0x00, (byte) 0x80, 0x00, (byte) 0xFA, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x64, 0x00, 0x32, 0x00
                , 0x3F, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) (byte) 0xFF, 0x00, (byte) 0x80, 0x00, 0x7D, 0x00, 0x00,
                0x00, 0x00, 0x00
                , (byte) 0xD0, 0x07, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xD0, 0x07, 0x00, 0x00,
                0x14, 0x00
                , 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0XE1, 0x00
                , 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00
                , 0x00, 0x00, (byte) (byte) 0xFF, 0x00, 0x00, 0x00, (byte) 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, (byte)
                (byte) 0xFF, 0x00, 0x00, 0x00
                , (byte) 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) (byte) 0xFF, 0x00, 0x00, 0x00, (byte) 0x80, 0x00,
                0x00, 0x00, 0x00, 0x00
                , (byte) (byte) 0xFF, 0x00, 0x00, 0x00, (byte) 0x80, 0x00, 0x00, 0x00, (byte) 0xCE, (byte) (byte)
                0xFF, 0x32, 0x00, 0x00, 0x00, 0x00, 0x01
                , 0x00, 0x00, (byte) 0x82, 0x0D, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
                , (byte) 0x83, 0x03, 0x52, 0x02, 0x30, 0x00, 0x00, 0x00, 0x78, 0x00, 0x32, 0x00, 0x01, 0x00, 0x01,
                0x00, 0x00
                , 0x0F, 0x01, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0D, 0x02, 0x00, 0x01
                , 0x00, (byte) (byte) 0xEC, (byte) (byte) 0xFF, 0x01, 0x00, 0x01, 0x02, 0x00, 0x0F, 0x03, 0x00, 0x14,
                0x00, (byte) (byte) 0xEC, (byte) (byte) 0xFF, 0x01
                , 0x00, 0x01, 0x02, 0x00, 0x0F, 0x04, 0x00, 0x14, 0x00, (byte) (byte) 0xEC, (byte) (byte) 0xFF, 0x01,
                0x00, 0x01, 0x02, 0x00
                , 0x0F, 0x05, 0x00, 0x14, 0x00, (byte) (byte) 0xEC, (byte) (byte) 0xFF, 0x01, 0x00, 0x01, 0x00, 0x00,
                0x0D, 0x02, 0x00, 0x14
                , 0x00, (byte) (byte) 0xEC, (byte) (byte) 0xFF, 0x01, 0x00, 0x01, 0x02, 0x00, 0x0F, 0x03, 0x00, 0x14,
                0x00, (byte) (byte) 0xEC, (byte) (byte) 0xFF, 0x01
                , 0x05, 0x01, 0x00, 0x0A, 0x00, 0x00, 0x03, 0x01, 0x00, 0x01, 0x00, 0x10, 0x0D, 0x02, 0x00, 0x01
                , 0x00, (byte) (byte) 0xEC, (byte) (byte) 0xFF, 0x01, 0x00, 0x01, 0x02, 0x00, 0x0F, 0x03, 0x00, 0x14,
                0x00, (byte) 0xEC, (byte) 0xFF, 0x01
                , 0x00, 0x01, 0x02, 0x00, 0x0F, 0x04, 0x00, 0x14, 0x00, (byte) (byte) 0xEC, (byte) (byte) 0xFF, 0x01,
                0x00, 0x01, 0x02, 0x00
                , 0x04, 0x05, 0x00, 0x14, 0x00, (byte) (byte) 0xEC, (byte) (byte) 0xFF, 0x01, 0x00, 0x01, 0x00, 0x02,
                0x0D, 0x02, 0x00, 0x11
                , 0x00, (byte) (byte) 0xEC, (byte) 0xFF, 0x01, 0x00, 0x01, 0x02, 0x00, 0x0F, 0x03, 0x00, 0x14, 0x00,
                (byte) 0xEC, (byte) 0xFF, 0x01
                , 0x0F, 0x01, 0x00, 0x0A, 0x00, 0x00, 0x0B, 0x01, 0x00, 0x01, 0x00, 0x10, 0x0D, 0x02, 0x00, 0x01
                , 0x00, (byte) 0xEC, (byte) 0xFF, 0x01, 0x00, 0x01, 0x02, 0x00, 0x0F, 0x03, 0x00, 0x14, 0x00, (byte)
                0xEC, (byte) 0xFF, 0x01
                , 0x00, 0x01, 0x02, 0x00, 0x0F, 0x04, 0x00, 0x14, 0x00, (byte) 0xEC, (byte) 0xFF, 0x01, 0x00, 0x01,
                0x02, 0x00
                , 0x0E, 0x05, 0x00, 0x14, 0x00, (byte) 0xEC, (byte) 0xFF, 0x01, 0x00, 0x01, 0x00, 0x05, 0x0D, 0x02,
                0x00, 0x06
                , 0x00, (byte) (byte) 0xEC, (byte) (byte) 0xFF, 0x01, 0x03, 0x01, 0x02, 0x00, 0x0F, 0x03, 0x00, 0x14,
                0x00, (byte) (byte) 0xEC, (byte) (byte) 0xFF, 0x01
                , 0x06, 0x01, 0x00, 0x0A, 0x00, 0x05, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0D, 0x02, 0x00, 0x02
                , 0x00, (byte) (byte) 0xEC, (byte) 0xFF, 0x01, 0x00, 0x01, 0x02, 0x00, 0x0F, 0x03, 0x00, 0x14, 0x00,
                (byte) 0xEC, (byte) 0xFF, 0x01
                , 0x00, 0x01, 0x02, 0x00, 0x0F, 0x04, 0x00, 0x17, 0x00, (byte) 0xEC, (byte) 0xFF, 0x01, 0x00, 0x01,
                0x02, 0x00
                , 0x0F, 0x05, 0x00, 0x14, 0x00, (byte) 0xEC, (byte) 0xFF, 0x01, 0x00, 0x01, 0x00, 0x0A, 0x0D, 0x02,
                0x00, 0x13
                , 0x00, (byte) (byte) 0xEC, (byte) 0xFF, 0x01, 0x00, 0x01, 0x02, 0x00, 0x0F, 0x03, 0x00, 0x14, 0x00,
                (byte) 0xEC, (byte) 0xFF, 0x01
                , 0x0F, 0x01, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0D, 0x02, 0x00, 0x02
                , 0x00, (byte) 0xEC, (byte) 0xFF, 0x01, 0x00, 0x01, 0x02, 0x00, 0x0F, 0x03, 0x00, 0x14, 0x00, (byte)
                0xEC, (byte) 0xFF, 0x01
                , 0x00, 0x01, 0x02, 0x00, 0x0F, 0x04, 0x00, 0x14, 0x00, (byte) 0xEC, (byte) 0xFF, 0x01, 0x00, 0x01,
                0x02, 0x00
                , 0x0F, 0x05, 0x00, 0x14, 0x00, (byte) 0xEC, (byte) 0xFF, 0x01, 0x00, 0x01, 0x00, 0x06, 0x0D, 0x02,
                0x00, 0x14
                , 0x00, (byte) 0xEC, (byte) 0xFF, 0x01, 0x00, 0x01, 0x02, 0x00, 0x0F, 0x03, 0x00, 0x14, 0x00, (byte)
                0xEC, (byte) 0xFF, 0x01
                , 0x0E, 0x01, 0x00, 0x0A, 0x00, 0x02, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0D, 0x02, 0x00, 0x07
                , 0x00, (byte) 0xEC, (byte) 0xFF, 0x01, 0x00, 0x01, 0x02, 0x00, 0x0F, 0x03, 0x00, 0x14, 0x00, (byte)
                0xEC, (byte) 0xFF, 0x01
                , 0x00, 0x01, 0x02, 0x00, 0x0F, 0x04, 0x00, 0x14, 0x00, (byte) (byte) 0xEC, (byte) (byte) 0xFF, 0x01,
                0x00, 0x01, 0x02, 0x00
                , 0x0F, 0x05, 0x00, 0x14, 0x00, (byte) (byte) 0xEC, (byte) (byte) 0xFF, 0x01, 0x00, 0x01, 0x00, 0x03,
                0x0D, 0x02, 0x00, 0x1A
                , 0x00, (byte) (byte) 0xEC, (byte) (byte) 0xFF, 0x01, 0x00, 0x01, 0x02, 0x00, 0x0F, 0x03, 0x00, 0x14,
                0x00, (byte) (byte) 0xEC, (byte) 0xFF, 0x01
                , 0x00, 0x01, 0x00, 0x0A, 0x00, 0x0E, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0D, 0x02, 0x00, 0x03
                , 0x00, (byte) 0xEC, (byte) 0xFF, 0x01, 0x00, 0x01, 0x02, 0x00, 0x0F, 0x03, 0x00, 0x14, 0x00, (byte)
                0xEC, (byte) 0xFF, 0x01
                , 0x00, 0x01, 0x02, 0x00, 0x0F, 0x04, 0x00, 0x14, 0x00, (byte) (byte) 0xEC, (byte) (byte) 0xFF, 0x01,
                0x00, 0x01, 0x02, 0x00
                , 0x04, 0x05, 0x00, 0x14, 0x00, (byte) (byte) 0xEC, (byte) (byte) 0xFF, 0x01, 0x00, 0x01, 0x00, 0x04,
                0x0D, 0x02, 0x00, 0x14
                , 0x00, (byte) 0xEC, (byte) 0xFF, 0x01, 0x00, 0x01, 0x02, 0x00, 0x0F, 0x03, 0x00, 0x14, 0x00, (byte)
                0xEC, (byte) 0xFF, 0x01
                , 0x0F, 0x01, 0x00, 0x0A, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x0D, 0x02, 0x00, 0x03
                , 0x00, (byte) 0xEC, (byte) 0xFF, 0x01, 0x00, 0x01, 0x02, 0x00, 0x0F, 0x03, 0x00, 0x14, 0x00, (byte)
                0xEC, (byte) 0xFF, 0x01
                , 0x00, 0x01, 0x02, 0x00, 0x0F, 0x04, 0x00, 0x14, 0x00, (byte) 0xEC, (byte) 0xFF, 0x01, 0x00, 0x01,
                0x02, 0x00
                , 0x00, 0x01, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x15
                , 0x00
        };
        ByteBuf byteBuf = Unpooled.buffer();
        byteBuf.writeBytes(bytes);
        QcmsDecode qcmsDecode = new QcmsDecode();
        qcmsDecode.decode(null, byteBuf, null);
    }

}
